
.slider {
  position: relative;
  // display: flex;
  // flex-direction: column;
  // align-items: center;
  
  touch-action: none;
  // flex-wrap: wrap;

  // TODO: remove this when done testing; should be container width
  // width: 50%;
  // max-width: 450px;
}
.sliderGroup {
  display: flex;
  align-items: stretch;
}

.labelWrapper {
  
}

.label {
  
}

.valueWrapper {
  display: flex;
  justify-content: center;
  align-items: center;
  background-color: $gray-100;
  // DOCS: note that the respective element is getting 'min-width' applied 
  //       programatically based on character count of max value
  align-self: stretch;
  padding: 0 1rem;
  color: $blue-700;
  &--focus {
    background-color: $blue;
    color: white;
  }
}

.value {
  font-family: $font-family-monospace;
  font-size: $small-font-size;
  text-align: center;
  padding: 0;
}
input.value {
  -moz-appearance: textfield;
  appearance: textfield;
  &::-webkit-inner-spin-button,
  &::-webkit-outer-spin-button {
    -webkit-appearance: none;
  }
  background-color: transparent;
  border: 0;
  color: $blue-700;
  &:focus {
    outline: 0;
    color: white;
  }
}
.valueUnit {
  @extend .value;
  padding-left: .25ch;
}

.numberInput {
  display: flex;
}
.increment,
.decrement {
  background-color: gray;
  display: none;
}


.trackWrapper {
  position: relative;
  width: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: .5rem 1.25rem;
  background-color: $canvas;
}

.track {
  height: 2px;
  width: 100%;
  background-color: $gray-100;
}

.trackTarget {
  padding: 6px 0;
  width: 100%;
  display: flex;
  align-items: center;
  cursor: pointer;
}

.trackInner {
  position: relative;
  width: 100%;
  display: flex;
  align-items: center;
}

.trackValue {
  position: absolute;
  background-color: $blue-700;
  height: 3px;
  z-index: 1;
  pointer-events: none;
  // DOCS: note that the respective element is getting 'width' applied 
  //       programatically based on current slider value
}

@mixin trackValueText {
  font-family: $font-family-monospace;
  font-size: $small-font-size;
  color: $dark-gray-300;
}
.trackMinValue {
  @include trackValueText;
  margin-right: 1.25rem;
}
.trackMaxValue {
  @include trackValueText;
  margin-left: 1.25rem;
}
.trackHiddenLabel {
  font-size: $small-font-size;
  width: 0;
}

.trackValue--drag,
.trackValue--focus {
  background-color: $blue;
}

.thumbWrapper {
  position: absolute;
  transform: translateX(-50%);
  cursor: pointer;
  z-index: 2;
  &:hover {
    .thumb {
      width: 1.75rem;
      height: 1.75rem;
    }
    .thumbValue {
      @extend .thumbValue--drag;
    }
  }
  // Don't want the JS-applied 'left' property to have transition
  // so be specific to just margin / property making it move
  transition: margin-top 0.1s ease-out;

  // DOCS: note that the respective element is getting 'left' applied 
  //       programatically based on current slider value
}

.thumb {
  // position: relative;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background-color: $blue-700;
  transition: 
    width 0.1s ease-out,
    height 0.1s ease-out,
    background-color 0.1s ease-out;
}

.thumbValue {
  opacity: 0;
  position: absolute;
  top: 2rem;
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
  pointer-events: none;
  user-select: none;
  transition: 0.1s ease-out;

  font-family: $font-family-monospace;
  color: $dark-gray-300;

  &--drag,
  &--focus {
    opacity: 1;
    transition-duration: 0.3s;
    transition-delay: 0.1s;
  }
}

.thumb--drag {
  background-color: $blue;
  width: 28px;
  height: 28px;
  box-sizing: content-box;
}

.thumb--focus {
  @extend .thumb--drag;
  // outline relpacement hack
  // Since We can't use outline doesn't respect border-rardius
  box-shadow:
    0 0 0 1.5px $canvas,
    0 0 0 3px $purple;
}

:export {
  thumb-width: 20;
}


